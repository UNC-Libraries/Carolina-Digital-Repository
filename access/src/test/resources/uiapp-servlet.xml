<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2008 The University of North Carolina at Chapel Hill

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
            http://www.springframework.org/schema/util 
            http://www.springframework.org/schema/util/spring-util-2.5.xsd
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <context:annotation-config />

    <bean name="propertiesURI" class="java.lang.System"
        factory-method="getProperty">
        <constructor-arg index="0" value="server.properties.uri" />
        <!-- property name for properties URI location -->
        <constructor-arg index="1" value="classpath:server.properties" />
        <!-- default location for testing -->
    </bean>
    <bean id="serverProperties"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <ref bean="propertiesURI" />
                <!-- non-runtime stuff <value>classpath:solr-ingest.properties</value> -->
            </list>
        </property>
        <property name="ignoreResourceNotFound" value="false" />
    </bean>

    <!-- Utils -->

    <bean id="accessGroupConstants" class="edu.unc.lib.dl.acl.util.AccessGroupConstants">
        <property name="ADMIN_GROUP" value="${access.group.admin}"/>
    </bean>

    <bean id="searchSettings" class="edu.unc.lib.dl.search.solr.util.SearchSettings">
        <property name="properties" ref="searchProperties" />
    </bean>

    <bean id="solrSettings" class="edu.unc.lib.dl.search.solr.util.SolrSettings">
        <property name="properties" ref="solrProperties" />
    </bean>

    <bean id="externalContentSettings" class="edu.unc.lib.dl.ui.util.ExternalContentSettings">
        <property name="properties" ref="externalContentProperties" />
    </bean>

    <bean id="lookupMappingsSettings" class="edu.unc.lib.dl.ui.util.LookupMappingsSettings"
        init-method="init">
        <property name="sourcePaths" value="#{externalContentSettings.list('mapping')}" />
    </bean>
    
    <bean id="accessSettings" class="edu.unc.lib.dl.ui.util.AccessControlSettings">
        <property name="properties" ref="accessProperties" />
    </bean>

    <bean id="hierarchicalFacet" class="edu.unc.lib.dl.search.solr.model.HierarchicalFacet">
        <property name="searchSettings" ref="searchSettings" />
    </bean>
    
    <bean id="hierarchicalBrowseResultResponse" class="edu.unc.lib.dl.ui.model.response.HierarchicalBrowseResultResponse">
        <property name="searchSettings" ref="searchSettings" />
    </bean>

    <bean id="searchStateUtil" class="edu.unc.lib.dl.search.solr.util.SearchStateUtil">
        <property name="searchSettings" ref="searchSettings" />
    </bean>
    
    <bean id="datastreamAccessValidator" class="edu.unc.lib.dl.ui.validator.DatastreamAccessValidator">
        <property name="accessSettings" ref="accessSettings" />
    </bean>

    <!-- Services -->
    <!-- Note, search service must initialize itself using solrSettings, 
        so it must come after solrSettings declaration -->
    <bean id="facetFieldFactory" class="edu.unc.lib.dl.search.solr.model.FacetFieldFactory">
        <property name="searchSettings" ref="searchSettings" />
        <property name="solrSettings" ref="solrSettings" />
    </bean>

    <bean id="searchStateFactory" class="edu.unc.lib.dl.search.solr.service.SearchStateFactory">
        <property name="searchSettings" ref="searchSettings" />
        <property name="facetFieldFactory" ref="facetFieldFactory" />
    </bean>

    <bean id="searchActionService" class="edu.unc.lib.dl.search.solr.service.SearchActionService">
        <property name="searchSettings" ref="searchSettings" />
        <property name="facetFieldFactory" ref="facetFieldFactory" />
    </bean>
    
    <bean id="queryLayer" class="edu.unc.lib.dl.ui.service.SolrQueryLayerService"
        init-method="initializeSolrServer">
        <property name="solrSettings" ref="solrSettings" />
        <property name="searchStateFactory" ref="searchStateFactory" />
    </bean>

    <!-- Beans -->

    <!-- Properties objects -->

    <util:properties id="searchProperties" location="classpath:search.properties" />
    <util:properties id="solrProperties" location="classpath:solr.properties">
        <prop key="solr.path">${solr.protocol}://${solr.host}${solr.port}/${solr.context}
        </prop>
    </util:properties>
    <util:properties id="externalContentProperties"
        location="classpath:externalContent.properties">
        <prop key="external.base.url">${external.base.url}</prop>
    </util:properties>
    <util:properties id="accessProperties" location="classpath:accessControl.properties">
        <prop key="access.group.admin">${access.group.admin}</prop>
    </util:properties>

    <!-- Validators -->
    <bean id="searchStateValidator"
        class="edu.unc.lib.dl.search.solr.validator.SearchStateValidator">
    </bean>

    <!-- JMX -->

    <bean id="exporter" class="org.springframework.jmx.export.MBeanExporter"
        lazy-init="false">
        <property name="beans">
            <map>
                <entry key="cdr-access:name=searchSettings" value-ref="searchSettings" />
            </map>
        </property>
        <property name="registrationBehaviorName" value="REGISTRATION_REPLACE_EXISTING"/>
    </bean>

    <!-- Import controllers -->
    <bean
        class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"></bean>
    <bean
        class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
    </bean>
    <context:component-scan base-package="edu.unc.lib.dl.ui.controller" />

    <!-- Map logical view names to physical views <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" 
        p:suffix=".jsp"/> -->
    <bean class="edu.unc.lib.dl.ui.view.CDRViewResolver" p:suffix=".jsp">
        <property name="exposedContextBeanNames">
            <list>
                <value>searchSettings</value>
                <value>externalContentSettings</value>
                <value>fedoraUtil</value>
                <value>accessGroupConstants</value>
            </list>
        </property>
        <property name="viewClass"
            value="org.springframework.web.servlet.view.JstlView" />
        <property name="baseView" value="index" />
        <property name="subViewPrefix" value="WEB-INF/jsp/" />
    </bean>

    <bean class="edu.unc.lib.dl.ui.view.XSLViewResolver">
        <!-- property name="views" value="#{externalContentSettings.map('xslView')}" /-->
        <property name="views">
            <map>
                <entry key="external.xslView.fullRecord.url" value="${external.base.file.url}recordTransformations/fullRecord.xsl"/>
            </map>
        </property>
    </bean>
</beans>
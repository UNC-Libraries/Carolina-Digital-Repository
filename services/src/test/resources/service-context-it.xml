<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.0.xsd
	http://www.springframework.org/schema/util 
	http://www.springframework.org/schema/util/spring-util.xsd">
	
	<bean name="propertiesURI" class="java.lang.System" factory-method="getProperty">
		<constructor-arg index="0" value="server.properties.uri"/>
		<!-- property name for properties URI location -->
		<constructor-arg index="1" value="classpath:server.properties"/>
		<!-- default location for testing -->
	</bean>
	<bean id="serverProperties"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<ref bean="propertiesURI"/>
				<value>classpath:cdr-services.properties</value>
				<value>classpath:scheduled-events.properties</value>
			</list>
		</property>
		<property name="ignoreResourceNotFound" value="false"/>
	</bean>
	
	<bean id="technicalMetadataEnhancementService" class="org.mockito.Mockito" factory-method="spy">
		<constructor-arg ref="realTechnicalMetadataEnhancementService"/>
	</bean>
	
<!--	<bean id="broker" class="org.apache.activemq.xbean.BrokerFactoryBean">
		<property name="config" value="classpath:activemq.xml" />
		<property name="start" value="true" />
	</bean>-->
	
<!--	<bean class="org.springframework.web.context.support.ServletContextAttributeExporter">
		<property name="attributes">
			<map>
				<!-\- inject the following beans into the servlet
					context so the servlets can access them. 
					<entry key="imageAccessService">
					<ref bean="imageAccessService"/>
					</entry>-\->
				<entry key="accessClient">
					<ref bean="accessClient"/>
				</entry>
				<entry key="managementClient">
					<ref bean="managementClient"/>
				</entry>
				<entry key="irodsAccount">
					<ref bean="irodsAccount"/>
				</entry>
			</map>
		</property>
	</bean>-->
	
	<bean id="tripleStoreQueryService"
		class="edu.unc.lib.dl.util.TripleStoreQueryServiceMulgaraImpl" destroy-method="destroy">
		<property name="itqlEndpointURL" value="${mulgara.protocol}://${mulgara.host}${mulgara.port}/webservices/services/ItqlBeanService"/>
		<property name="sparqlEndpointURL" value="${mulgara.protocol}://${mulgara.host}${mulgara.port}/sparql/"/>
		<property name="serverModelUri" value="rmi://${mulgara.model.uri}/server1#"/>
	</bean>
	<bean id="managementClient" class="edu.unc.lib.dl.fedora.ManagementClient"
		init-method="init" destroy-method="destroy">
		<property name="fedoraContextUrl"
			value="${fedora.protocol}://${fedora.host}${fedora.port}/${fedora.context}" />
		<property name="username" value="${fedora.admin.username}" />
		<property name="password" value="${fedora.admin.password}" />
	</bean>
	<bean id="accessClient" class="edu.unc.lib.dl.fedora.AccessClient" init-method="init">
		<property name="fedoraContextUrl" value="${fedora.protocol}://${fedora.host}${fedora.port}/${fedora.context}" />
		<property name="username" value="${fedora.admin.username}" />
		<property name="password" value="${fedora.admin.password}" />
	</bean>
	
<!--	<bean id="fedoraDataService" class="edu.unc.lib.dl.fedora.FedoraDataService">
		<property name="accessClient" ref="accessClient"/>
		<property name="managementClient" ref="managementClient"/>
		<property name="tripleStoreQueryService" ref="tripleStoreQueryService"/>
		<property name="accessControlUtils" ref="accessControlUtils"/>
	</bean>-->
	
<!--	<bean id="accessControlUtils" class="edu.unc.lib.dl.fedora.AccessControlUtils" init-method="initReadPermissionOnly">
		<property name="tripleStoreQueryService" ref="tripleStoreQueryService"/>
		<property name="cacheDepth" value="4"/>
		<property name="cacheLimit" value="5000"/>
		<property name="accessControlProperties">
			<props>
				<prop key="http://cdr.unc.edu/definitions/roles#patron">permitMetadataRead permitOriginalsRead permitDerivativesRead</prop>
				<prop key="http://cdr.unc.edu/definitions/roles#noOriginalsPatron">permitMetadataRead permitDerivativesRead</prop>
				<prop key="http://cdr.unc.edu/definitions/roles#metadataOnlyPatron">permitMetadataRead</prop>
				<prop key="http://cdr.unc.edu/definitions/roles#curator">permitMetadataCreate permitMetadataRead permitMetadataUpdate permitOriginalsCreate permitOriginalsRead permitOriginalsUpdate permitDerivativesCreate permitDerivativesRead permitDerivativesUpdate</prop>
				<prop key="http://cdr.unc.edu/definitions/roles#admin">permitMetadataCreate permitMetadataRead permitMetadataUpdate permitMetadataDelete permitOriginalsCreate permitOriginalsRead permitOriginalsUpdate permitOriginalsDelete permitDerivativesCreate permitDerivativesRead permitDerivativesUpdate permitDerivativesDelete</prop>
			</props>
		</property>
	</bean>-->
	
	<bean id="irodsAccount" class="org.irods.jargon.core.connection.IRODSAccount">
		<constructor-arg value="${irods.host}"/>
		<constructor-arg value="${irods.port}" type="int"/>
		<constructor-arg value="${irods.services.username}"/>
		<constructor-arg value="${irods.services.password}"/>
		<constructor-arg value="/${irods.zone}/home/${irods.services.username}"/>
		<constructor-arg value="${irods.zone}"/>
		<constructor-arg value="${irods.default.resc}"/>
	</bean> 
	
	<!-- a pooling based JMS provider -->
	<bean id="jmsFactory" class="org.apache.activemq.pool.PooledConnectionFactory" destroy-method="stop">
		<property name="connectionFactory">
			<bean class="org.apache.activemq.ActiveMQConnectionFactory">
				<property name="brokerURL"> 
					<value>tcp://${jms.host}${jms.port}</value>
				</property>
			</bean>
		</property>
	</bean>
	
	<!-- and this is the message listener container-->
	<bean id="jmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="jmsFactory"/>
		<property name="destinationName" value="fedora.apim.update"/>
		<property name="pubSubDomain" value="true"/>
		<property name="messageListener" ref="servicesMessageListener" />
		<property name="sessionTransacted" value="true"/>
	</bean>
	
	<bean id="cdrJmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="jmsFactory"/>
		<property name="destinationName" value="repository.updates"/>
		<property name="pubSubDomain" value="true"/>
		<property name="messageListener" ref="cdrServicesMessageListener" />
		<property name="sessionTransacted" value="true"/>
	</bean>  
	
	<bean id="enhancementConductor"  class="edu.unc.lib.dl.cdr.services.EnhancementConductor"
		init-method="init" destroy-method="destroy">
		<property name="services">
			<list>
				<!--<ref bean="technicalMetadataEnhancementService"/>-->
				<!--<ref bean="imageEnhancementService"/>-->
				<!--<ref bean="solrUpdateEnhancementService"/>-->
			</list>
		</property>
		<property name="maxThreads" value="${maxServiceThreads}"/>
	</bean>
	
	<bean id="cdrServicesMessageListener" class="edu.unc.lib.dl.cdr.services.ServicesMessageListener">
		<property name="enhancementConductor" ref="enhancementConductor"/>
	</bean>
	
	<bean id="servicesMessageListener" class="edu.unc.lib.dl.cdr.services.ServicesMessageListener">
		<property name="enhancementConductor" ref="enhancementConductor"/>
	</bean>
	
	<!-- Services -->
	<bean id="realTechnicalMetadataEnhancementService" class="edu.unc.lib.dl.cdr.services.techmd.TechnicalMetadataEnhancementService">
		<property name="irodsAccount" ref="irodsAccount"/>
		<property name="tripleStoreQueryService" ref="tripleStoreQueryService"/>
		<property name="managementClient" ref="managementClient"/>
		<property name="active" value="true"/>
	</bean>
	
	<bean id="imageEnhancementService" class="edu.unc.lib.dl.cdr.services.imaging.ImageEnhancementService">
		<property name="irodsAccount" ref="irodsAccount"/>
		<property name="tripleStoreQueryService" ref="tripleStoreQueryService"/>
		<property name="managementClient" ref="managementClient"/>
		<property name="active" value="true"/>
	</bean>
	
	<bean id="thumbnailEnhancementService" class="edu.unc.lib.dl.cdr.services.imaging.ThumbnailEnhancementService">
		<property name="irodsAccount" ref="irodsAccount"/>
		<property name="tripleStoreQueryService" ref="tripleStoreQueryService"/>
		<property name="managementClient" ref="managementClient"/>
		<property name="active" value="true"/>
	</bean>
	
<!--	<bean id="solrUpdateEnhancementService" class="edu.unc.lib.dl.cdr.services.solr.SolrUpdateEnhancementService">
		<property name="solrUpdateService" ref="solrUpdateService"/>
		<property name="tripleStoreQueryService" ref="tripleStoreQueryService"/>
		<property name="active" value="true"/>
	</bean>
	
	<bean id="embargoUpdateService" class="edu.unc.lib.dl.cdr.services.solr.EmbargoUpdateService">
		<property name="solrUpdateService" ref="solrUpdateService"/>
		<property name="tripleStoreQueryService" ref="tripleStoreQueryService"/>
		<property name="active" value="true"/>
		<property name="windowSizeHours" value="${scheduled.embargoUpdate.windowHours}" />
	</bean>
	
	<bean id="solrJMXService" class="edu.unc.lib.dl.cdr.services.solr.SolrJMXService">
		<property name="solrUpdateService" ref="solrUpdateService"/>
		<property name="active" value="true"/>
	</bean>-->
	
	<!-- Scheduler -->
	
<!--	<bean id="acCacheResetJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="accessControlUtils" />
		<property name="targetMethod" value="cacheCleanupForCdrBasedAccessControl" />
	</bean>
	
	<bean id="acCacheResetCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="acCacheResetJobDetail" />
		<property name="cronExpression" value="${scheduled.acCacheReset.cron}" />
	</bean>-->
	
	
	
<!--	<bean id="embargoJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="embargoUpdateService" />
		<property name="targetMethod" value="updateEmbargoes" />
	</bean>
	
	<bean id="embargoCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="embargoJobDetail" />
		<property name="cronExpression" value="${scheduled.embargoUpdate.cron}" />
	</bean>-->
	
<!--	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<!-\-<ref bean="embargoCronTrigger" />-\->
				<ref bean="acCacheResetCronTrigger" />
			</list>
		</property>
	</bean>-->
	
	<!-- JMX -->
	
<!--	<bean id="loggingExporter" class="org.springframework.jmx.export.MBeanExporter"
		lazy-init="false">
		<property name="beans">
			<map>
				<entry key="de.stefanheintz.log:jmxservice=loggingConfiguration" value-ref="loggingMBean" />
			</map>
		</property>
		<property name="registrationBehaviorName" value="REGISTRATION_REPLACE_EXISTING"/>
		<property name="assembler">
			<bean class="org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler">
				<property name="managedInterfaces">
					<array value-type="java.lang.Class">
						<value>de.stefanheintz.log.jmxservice.LoggingConfig</value>
					</array>
				</property>				
			</bean>
		</property>
	</bean>-->
	
<!--	<bean id="exporter" class="org.springframework.jmx.export.MBeanExporter"
		lazy-init="false">
		<property name="beans">
			<map>
				<!-\-<entry key="cdr-services:name=solrJMXService" value-ref="solrJMXService" />-\->
				<entry key="cdr-services:name=enhancementConductor" value-ref="enhancementConductor" />
				<!-\-<entry key="cdr-services:name=solrUpdateService" value-ref="solrUpdateService" />-\->
				<entry key="cdr-services:name=fedoraDataService" value-ref="fedoraDataService" />
			</map>
		</property>
		<property name="registrationBehaviorName" value="REGISTRATION_REPLACE_EXISTING"/>
	</bean>-->
	
	<!-- Logging MBean -->
	<!-- http://code.google.com/p/logging-jmx-service/wiki/Tutorial -->
<!--	<bean id="loggingMBean" class="de.stefanheintz.log.jmxservice.LoggingConfigImpl">
	</bean>-->
	
	<!-- Solr ingest dependencies -->
	
<!--	<bean id="updateDocTransformer" class="edu.unc.lib.dl.data.ingest.solr.UpdateDocTransformer"
		init-method="init">
		<property name="xslName" value="${addDocXslName}"/>
	</bean>
	
	<bean id="searchSettings" class="edu.unc.lib.dl.search.solr.util.SearchSettings">
		<property name="properties" ref="searchProperties" />
	</bean>
	<bean id="solrSettings" class="edu.unc.lib.dl.search.solr.util.SolrSettings">
		<property name="properties" ref="solrProperties" />
	</bean>
	<util:properties id="searchProperties" location="classpath:search.properties" />
	<util:properties id="solrProperties" location="classpath:solr.properties"
		local-override="true">
		<prop key="solr.path">${solr.protocol}://${solr.host}${solr.port}/${solr.context}</prop>
	</util:properties>
	
	<bean id="hierarchicalFacet" class="edu.unc.lib.dl.search.solr.model.HierarchicalFacet">
		<property name="searchSettings" ref="searchSettings" />
	</bean>
	
	<bean id="solrDataAccessLayer" class="edu.unc.lib.dl.data.ingest.solr.SolrDataAccessLayer"
		init-method="initializeSolrServer">
		<property name="solrSettings" ref="solrSettings"/>
	</bean>
	<bean id="solrSearchService" class="edu.unc.lib.dl.search.solr.service.SolrSearchService"
		init-method="initializeSolrServer">
		<property name="solrSettings" ref="solrSettings"/>
	</bean>
	<bean id="searchStateFactory" class="edu.unc.lib.dl.search.solr.service.SearchStateFactory">
		<property name="searchSettings" ref="searchSettings" />
	</bean>
	<util:set id="accessGroups" set-class="edu.unc.lib.dl.security.access.AccessGroupSet">
		<value>${access.group.admin}</value>
	</util:set>-->
<!--	<bean id="solrUpdateService" class="edu.unc.lib.dl.data.ingest.solr.SolrUpdateService"
		init-method="init" destroy-method="destroy">
		<property name="fedoraDataService" ref="fedoraDataService" />
		<property name="updateDocTransformer" ref="updateDocTransformer" />
		<property name="solrDataAccessLayer" ref="solrDataAccessLayer" />
		<property name="solrSearchService" ref="solrSearchService" />
		<property name="maxIngestThreads" value="${maxSolrIngestThreads}" />
		<property name="accessGroups" ref="accessGroups" />
		<property name="searchSettings" ref="searchSettings" />
	</bean>-->
</beans>

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:c="http://www.springframework.org/schema/c"
    xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/util 
        http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.3.xsd">

    <bean name="propertiesURI" class="java.lang.System"
        factory-method="getProperty">
        <constructor-arg index="0" value="deposit.properties.uri" />
    </bean>

    <bean id="depositEmailHandler" class="edu.unc.lib.deposit.work.DepositEmailHandler" >
        <property name="depositStatusFactory" ref="depositStatusFactory" />
        <property name="baseUrl" value="${baseUrl}" />
        <property name="mailSender" ref="mailSender" />
        <property name="administratorEmail" value="${administrator.email}" />
        <property name="completedHtmlTemplate" ref="completedHtmlTemplate" />
        <property name="completedTextTemplate" ref="completedTextTemplate" />
        <property name="failedHtmlTemplate" ref="failedHtmlTemplate" />
        <property name="failedTextTemplate" ref="failedTextTemplate" />
    </bean>
    
    <bean id="jmsFactory" class="org.apache.activemq.pool.PooledConnectionFactory"
        destroy-method="stop">
        <property name="connectionFactory">
            <bean class="org.apache.activemq.ActiveMQConnectionFactory">
                <property name="brokerURL">
                    <value>${jms.broker.uri}</value>
                </property>
            </bean>
        </property>
    </bean>
    
    <bean id="cdrEventsJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="jmsFactory" />
        <property name="defaultDestinationName" value="${cdr.stream}" />
        <property name="pubSubDomain" value="false" />
    </bean>
    
    <bean id="operationsMessageSender" class="edu.unc.lib.dl.services.OperationsMessageSender">
        <property name="jmsTemplate" ref="cdrEventsJmsTemplate" />
    </bean>
    
    <bean id="premisLoggerFactory" class="edu.unc.lib.dl.event.PremisLoggerFactory">
        <property name="pidMinter" ref="pidMinter" />
        <property name="repoObjLoader" ref="repositoryObjectLoader" />
        <property name="repoObjDriver" ref="repositoryObjectDriver" />
        <property name="repoObjFactory" ref="repositoryObjectFactory" />
    </bean>
    
    <bean class="edu.unc.lib.dl.schematron.SchematronValidator" name="schematronValidator"
        init-method="loadSchemas">
        <property name="schemas">
            <map>
                <entry key="#{T(edu.unc.lib.dl.xml.METSProfile).CDR_SIMPLE.name}"
                    value="classpath:edu/unc/lib/dl/schematron/simple_mets_profile.sch" />
                <entry key="object-mods"
                    value="classpath:edu/unc/lib/dl/schematron/object-mods.sch" />
                <entry key="vocabularies-mods"
                    value="classpath:edu/unc/lib/dl/schematron/vocabularies-mods.sch" />
                <entry key="#{T(edu.unc.lib.dl.xml.METSProfile).DSPACE_SIP.name}"
                    value="classpath:edu/unc/lib/dl/schematron/dspace_mets_profile.sch" />
            </map>
        </property>
    </bean>

    <bean id="schemaFactory" class="javax.xml.validation.SchemaFactory"
        factory-method="newInstance" scope="prototype">
        <constructor-arg value="#{T(javax.xml.XMLConstants).W3C_XML_SCHEMA_NS_URI}" />
    </bean>
    
    <bean id="modsValidator" class="edu.unc.lib.dl.validation.MODSValidator">
        <property name="schematronValidator" ref="schematronValidator" />
        <property name="modsSchema">
            <bean class="javax.xml.validation.Schema" factory-bean="schemaFactory"
                factory-method="newSchema">
                <constructor-arg>
                    <list value-type="javax.xml.transform.Source">
                        <bean class="javax.xml.transform.stream.StreamSource">
                            <constructor-arg type="java.io.InputStream"
                                value="classpath:/schemas/xml.xsd" />
                        </bean>
                        <bean class="javax.xml.transform.stream.StreamSource">
                            <constructor-arg type="java.io.InputStream"
                                value="classpath:/schemas/xlink.xsd" />
                        </bean>
                        <bean class="javax.xml.transform.stream.StreamSource">
                            <constructor-arg type="java.io.InputStream"
                                value="classpath:/schemas/mods-3-7.xsd" />
                        </bean>
                    </list>
                </constructor-arg>
            </bean>
        </property>
    </bean>

    <bean id="metsSipSchema" class="javax.xml.validation.Schema"
        factory-bean="schemaFactory" factory-method="newSchema">
        <constructor-arg>
            <list value-type="javax.xml.transform.Source">
                <bean class="javax.xml.transform.stream.StreamSource">
                    <constructor-arg type="java.io.InputStream" value="classpath:/schemas/xml.xsd" />
                </bean>
                <bean class="javax.xml.transform.stream.StreamSource">
                    <constructor-arg type="java.io.InputStream" value="classpath:/schemas/xlink.xsd" />
                </bean>
                <bean class="javax.xml.transform.stream.StreamSource">
                    <constructor-arg type="java.io.InputStream" value="classpath:/schemas/mets.xsd" />
                </bean>
                <bean class="javax.xml.transform.stream.StreamSource">
                    <constructor-arg type="java.io.InputStream" value="classpath:/schemas/premis-v2-0.xsd" />
                </bean>
                <bean class="javax.xml.transform.stream.StreamSource">
                    <constructor-arg type="java.io.InputStream" value="classpath:/schemas/mods-3-7.xsd" />
                </bean>
                <bean class="javax.xml.transform.stream.StreamSource">
                    <constructor-arg type="java.io.InputStream" value="classpath:/schemas/acl.xsd" />
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean id="transformerFactory" class="javax.xml.transform.TransformerFactory"
        factory-method="newInstance" scope="prototype">
        <property name="uRIResolver">
            <bean class="edu.unc.lib.dl.xml.ClasspathURIResolver">
            </bean>
        </property>
    </bean>

    <bean id="epdcx2modsTransformer" factory-bean="transformerFactory"
        factory-method="newTransformer" scope="prototype">
        <constructor-arg>
            <bean class="org.springframework.xml.transform.ResourceSource">
                <constructor-arg>
                    <value>classpath:epdcx2mods.xsl</value>
                </constructor-arg>
            </bean>
        </constructor-arg>
    </bean>
    
    <bean id="proquest2ModsTransformer" factory-bean="transformerFactory"
        factory-method="newTransformer" scope="prototype">
        <constructor-arg>
            <bean class="org.springframework.xml.transform.ResourceSource">
                <constructor-arg>
                    <value>classpath:proquest-to-mods.xsl</value>
                </constructor-arg>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="PrepareResubmitJob" class="edu.unc.lib.deposit.PrepareResubmitJob"
        scope="prototype">
    </bean>

    <bean id="PackageIntegrityCheckJob" class="edu.unc.lib.deposit.validate.PackageIntegrityCheckJob"
        scope="prototype">
    </bean>

    <bean id="UnpackDepositJob" class="edu.unc.lib.deposit.normalize.UnpackDepositJob"
        scope="prototype">
    </bean>
    
    <bean id="BagIt2N3BagJob" class="edu.unc.lib.deposit.normalize.BagIt2N3BagJob"
        scope="prototype">
    </bean>
    
    <bean id="DirectoryToBagJob" class="edu.unc.lib.deposit.normalize.DirectoryToBagJob"
        scope="prototype">
    </bean>

    <bean id="CDRMETS2N3BagJob" class="edu.unc.lib.deposit.normalize.CDRMETS2N3BagJob"
        scope="prototype">
        <property name="schematronValidator" ref="schematronValidator" />
        <property name="metsSipSchema" ref="metsSipSchema" />
    </bean>

    <bean id="BioMedToN3BagJob" class="edu.unc.lib.deposit.normalize.BioMedToN3BagJob"
        scope="prototype">
        <property name="schematronValidator" ref="schematronValidator" />
        <property name="metsSipSchema" ref="metsSipSchema" />
        <property name="epdcx2modsTransformer" ref="epdcx2modsTransformer" />
    </bean>

    <bean id="Simple2N3BagJob" class="edu.unc.lib.deposit.normalize.Simple2N3BagJob"
        scope="prototype"/>
        
    <bean id="Proquest2N3BagJob" class="edu.unc.lib.deposit.normalize.Proquest2N3BagJob"
        scope="prototype">
        <property name="proquest2ModsTransformer" ref="proquest2ModsTransformer" />
    </bean>
    
    <bean id="NormalizeFileObjectsJob" class="edu.unc.lib.deposit.normalize.NormalizeFileObjectsJob"
        scope="prototype">
    </bean>
    
    <bean id="aclValidator" class="edu.unc.lib.dl.acl.fcrepo4.ContentObjectAccessRestrictionValidator">
    </bean>
    
    <bean id="ValidateContentModelJob" class="edu.unc.lib.deposit.validate.ValidateContentModelJob"
        scope="prototype">
        <property name="aclValidator" ref="aclValidator" />
    </bean>
    
    <bean id="VocabularyEnforcementJob" class="edu.unc.lib.deposit.normalize.VocabularyEnforcementJob"
        scope="prototype">
    </bean>
    
    <bean id="clamScan" class="com.philvarner.clamavj.ClamScan">
        <constructor-arg type="java.lang.String" value="${clamd.host:localhost}" index="0" />
        <constructor-arg type="int" value="${clamd.port:3310}" index="1" />
        <constructor-arg type="int" value="${clamd.timeout:60000}" index="2" />
    </bean>

    <bean id="VirusScanJob" class="edu.unc.lib.deposit.validate.VirusScanJob"
        scope="prototype">
        <property name="clamScan" ref="clamScan" />
    </bean>

    <bean id="ValidateFileAvailabilityJob" class="edu.unc.lib.deposit.validate.ValidateFileAvailabilityJob"
        scope="prototype">
        <property name="stagingPolicyManager" ref="stagingPolicyManager" />
    </bean>

    <bean id="ValidateDescriptionJob" class="edu.unc.lib.deposit.validate.ValidateDescriptionJob"
        scope="prototype">
        <property name="modsValidator" ref="modsValidator" />
    </bean>
    
    <bean id="ExtractTechnicalMetadataJob" class="edu.unc.lib.deposit.validate.ExtractTechnicalMetadataJob"
        scope="prototype">
        <property name="baseFitsUri" value="${fits.baseUri}" />
        <property name="httpClient" ref="pooledHttpClient" />
        <property name="processFilesLocally" value="${fits.processFilesLocally:true}" />
    </bean>
    
    <bean id="ingestContentObjectsJob" class="edu.unc.lib.deposit.fcrepo4.IngestContentObjectsJob"
        scope="prototype">
    </bean>
    
    <bean id="ingestDepositRecordJob" class="edu.unc.lib.deposit.fcrepo4.IngestDepositRecordJob"
        scope="prototype">
    </bean>
    
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${smtp.host:localhost}" />
        <property name="port" value="${smtp.port:25}" />
        <property name="defaultEncoding" value="UTF-8" />
    </bean>
    
    <bean id="mustacheCompiler" class="com.samskivert.mustache.Mustache" factory-method="compiler"/>

    <bean id="completedHtmlTemplate" factory-bean="mustacheCompiler"
        factory-method="compile">
        <constructor-arg>
            <bean class="java.io.InputStreamReader">
                <constructor-arg type="java.io.InputStream" value="classpath:completed_html.txt" />
            </bean>
        </constructor-arg>
    </bean>
    
    <bean id="completedTextTemplate" factory-bean="mustacheCompiler"
        factory-method="compile">
        <constructor-arg>
            <bean class="java.io.InputStreamReader">
                <constructor-arg type="java.io.InputStream" value="classpath:completed_text.txt" />
            </bean>
        </constructor-arg>
    </bean>

    <bean id="failedHtmlTemplate" factory-bean="mustacheCompiler"
        factory-method="compile">
        <constructor-arg>
            <bean class="java.io.InputStreamReader">
                <constructor-arg type="java.io.InputStream" value="classpath:failed_html.txt" />
            </bean>
        </constructor-arg>
    </bean>
    
    <bean id="failedTextTemplate" factory-bean="mustacheCompiler"
        factory-method="compile">
        <constructor-arg>
            <bean class="java.io.InputStreamReader">
                <constructor-arg type="java.io.InputStream" value="classpath:failed_text.txt" />
            </bean>
        </constructor-arg>
    </bean>

    <bean id="CleanupDepositJob" class="edu.unc.lib.deposit.CleanupDepositJob"
        scope="prototype">
        <property name="stagingPolicyManager" ref="stagingPolicyManager" />
        <property name="statusKeysExpireSeconds" value="${status.keys.expire.seconds:3600}"/>
    </bean>
</beans>